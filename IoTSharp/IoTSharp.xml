<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IoTSharp</name>
    </assembly>
    <members>
        <member name="T:IoTSharp.Controllers.AccountController">
            <summary>
            User Management
            </summary>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.#ctor(Microsoft.AspNetCore.Identity.UserManager{Microsoft.AspNetCore.Identity.IdentityUser},Microsoft.AspNetCore.Identity.SignInManager{Microsoft.AspNetCore.Identity.IdentityUser},Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger{IoTSharp.Controllers.AccountController},IoTSharp.Data.ApplicationDbContext,Microsoft.Extensions.Options.IOptions{IoTSharp.Contracts.AppSettings})">
            <summary>
            User Management
            </summary>
            <param name="userManager"></param>
            <param name="signInManager"></param>
            <param name="configuration"></param>
            <param name="logger"></param>
            <param name="context"></param>
            <param name="options"></param>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.Avatar">
            <summary>
            Get the current user's avatar, generated based on email
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.MyInfo">
            <summary>
            Get current logged in user information
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.Login(IoTSharp.Dtos.LoginDto)">
            <summary>
            Login user
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.RefreshToken(IoTSharp.Dtos.RefreshTokenDto)">
            <summary>
            Refresh JWT Token
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.Logout">
            <summary>
            Log out of account
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.Register(IoTSharp.Dtos.RegisterDto)">
            <summary>
            registered user
            </summary>
            <param name="model"></param>
            <returns >Return login results</returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.Create(IoTSharp.Dtos.InstallDto)">
            <summary>
            Register new tenants, customers, and users
            </summary>
            <param name="model"></param>
            <returns >Return login results</returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.CreateUser(IoTSharp.Dtos.CreateUserDto)">
            <summary>
            Register new tenants, customers, and users
            </summary>
            <param name="model"></param>
            <returns >Return login results</returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.PostAccount(IoTSharp.Dtos.CreateUserInput)">
            <summary>
            Add user zhangjie 20230308 to the tenant where the current customer is located
            </summary>
            <param name="model">Front-end parameter passing</param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.List(IoTSharp.Controllers.Models.UserQueryDto)">
            <summary>
            List all users of the specified tenant.
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.Get(System.String)">
            <summary>
            Return user information
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.Lock(IoTSharp.Dtos.LockDto)">
             <summary>
             Lock user
             </summary>
             <param name="dto"></param>
             <returns>
             UserAlreadyExists = 10020,
             NotFoundUser = 10021,
             CanNotLockUser = 10022,
            LockUserHaveError = 10023
            CanNotLockYourself =10028
            CanNotUnlockYourself =10029
            </returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.Modify(IoTSharp.Dtos.UserItemDto)">
            <summary>
            Modify user information
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.ModifyMyInfo(IoTSharp.Dtos.UserItemDto)">
            <summary>
            Modify current user information
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AccountController.ModifyMyPassword(IoTSharp.Dtos.UserPassword)">
            <summary>
            Modify current user information
            </summary>
            <returns></returns>
        </member>
        <member name="T:IoTSharp.Controllers.AlarmController">
            <summary>
            Alarm management
            </summary>
        </member>
        <member name="M:IoTSharp.Controllers.AlarmController.Occurred(IoTSharp.Contracts.CreateAlarmDto)">
            <summary>
            Create an alarm, but do not trigger the rule chain. To trigger a rule chain, use the device-related API
            </summary>
            <param name="dto">Alarm content</param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AlarmController.List(IoTSharp.Controllers.Models.AlarmParam)">
            <summary>
            Query alarm information
            </summary>
            <param name="m">OriginatorType needs to be filled in when specifying OriginatorId</param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AlarmController.Originators(IoTSharp.Models.ModelOriginatorSearch)">
            <summary>
            Search for alarm initiating object
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AlarmController.AckAlarm(IoTSharp.Contracts.AlarmStatusDto)">
            <summary>
            Confirm alarm
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AlarmController.ClearAlarm(IoTSharp.Contracts.AlarmStatusDto)">
            <summary>
            Clear alarm information
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AssetController.Relations(System.Guid)">
            <summary>
            Get the asset's properties and telemetry data
            </summary>
            <param name="assetid"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AssetController.Get(System.Guid)">
            <summary>
            Get asset information based on asset ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AssetController.Update(IoTSharp.Contracts.AssetDto)">
            <summary>
            Modify asset information
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AssetController.Save(IoTSharp.Contracts.AssetAddDto)">
            <summary>
            Save asset information
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AssetController.addDevice(IoTSharp.Models.ModelAddAssetDevice)">
            <summary>
            Add assets
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AssetController.RemoveAssetRaletions(System.Guid)">
            <summary>
            Remove asset attributes or telemetry based on Id
            </summary>
            <param name="relationId"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AssetController.EditRelation(IoTSharp.Models.ModelEditAssetAttrItem)">
            <summary>
            Modify asset and device related properties or telemetry information
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="T:IoTSharp.Controllers.AuthorizedKeysController">
            <summary>
            Global device authentication KEY management
            </summary>
        </member>
        <member name="M:IoTSharp.Controllers.AuthorizedKeysController.GetAuthorizedKeys">
            <summary>
            Get the global authentication KEY of the client of the currently logged in user
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.AuthorizedKeysController.GetAuthorizedKey(System.Guid)">
            <summary>
            Get KEY based on ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:IoTSharp.Controllers.CaptchaController">
            <summary>
            Login verification code
            </summary>
        </member>
        <member name="M:IoTSharp.Controllers.CaptchaController.Index(System.String)">
            <summary>
            Generate a graphical authentication
            </summary>
            <param name="clientid"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.CaptchaController.Imgs">
            <summary>
            Generate a graphical authentication
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.CaptchaController.Vertify(System.String,IoTSharp.Models.ModelCaptchaVertify)">
            <summary>
            Verify graphic authentication
            </summary>
            <param name="clientid"></param>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="T:IoTSharp.Controllers.CustomersController">
            <summary>
            Customer Management
            </summary>
        </member>
        <member name="M:IoTSharp.Controllers.CustomersController.GetAllCustomers(System.Guid)">
            <summary>
            Get all customers under the specified tenant
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.CustomersController.GetCustomers(IoTSharp.Controllers.Models.CustomerParam)">
            <summary>
            Get all customers under the specified tenant
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.CustomersController.GetCustomer(System.Guid)">
            <summary>
            Returns the customer with the specified id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.CustomersController.PutCustomer(System.Guid,IoTSharp.Dtos.CustomerDto)">
            <summary>
            Modify the information specified by the specified tenant
            </summary>
            <param name="id"></param>
            <param name="customer"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.CustomersController.PostCustomer(IoTSharp.Dtos.CustomerDto)">
            <summary>
            Add a new customer to the tenant where the current customer is located
            </summary>
            <param name="customer"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.CustomersController.DeleteCustomer(System.Guid)">
            <summary>
            Delete the specified customer ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:IoTSharp.Controllers.DeviceModelController">
            <summary>
            Device model
            </summary>
        </member>
        <member name="T:IoTSharp.Controllers.DevicesController">
            <summary>
            Device management
            </summary>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetAllDevices(System.Guid)">
            <summary>
            Get the device list of the specified customer
            </summary>
            <param name="customerId"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetDevices(IoTSharp.Controllers.Models.DeviceParam)">
            <summary>
            Get the device list of the specified customer
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetIdentity(System.Guid)">
            <summary>
            Get the authentication method information of the specified device
            </summary>
            <param name="deviceId"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.CreateX509Identity(System.Guid)">
            <summary>
            Get the authentication method information of the specified device
            </summary>
            <param name="deviceId"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.DownloadCertificates(System.Guid)">
            <summary>
            Download certificate
            </summary>
            <param name="deviceId"></param>
            <returns>A compressed package containing ca.crt client.crt client. Key</returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetAttributeLatest(System.Guid)">
            <summary>
            Get the latest attributes of the specified device
            </summary>
            <param name="deviceId"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetAttributeLatestByKeyNameAndDeviceId(IoTSharp.Dtos.AttributeLatestByKeyNameAndDeviceIdDto)">
             <summary>
            Get the latest attributes of the specified Key and device ID list
             </summary>
             <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetAttributeLatest(System.Guid,System.String)">
            <summary>
            Get the latest attributes of the specified keys of the specified device
            </summary>
            <param name="deviceId">Which device do you read?</param>
            <param name="keys">Specify key name list , use , or space or ; to split </param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetTelemetryLatest(System.Guid)">
             <summary>
            Get the latest telemetry data of the specified device
             </summary>
             <param name="deviceId"></param>
             <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetTelemetryLatest(System.Guid,System.String)">
            <summary>
            Get the telemetry data of the specified key of the specified device
            </summary>
            <param name="deviceId">Which device do you read?</param>
            <param name="keys">Specify a list of key values, separated by semicolons or commas. </param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetTelemetryData(System.Guid,System.String,System.DateTime)">
            <summary>
            Get the data of the specified device, specified time, and specified key
            </summary>
            <param name="deviceId">Which device do you read?</param>
            <param name="keys">Specify key name list , use , or space or ; to split </param>
            <param name="begin">Start with time, such as 2019-06-06 12:24</param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetTelemetryData(System.Guid,System.String,System.DateTime,System.DateTime)">
            <summary>
            Returns the telemetry data of the specified device, obtained according to keyname and the specified time range. If keyname is all, then returns the data of all keys.
            </summary>
            <param name="deviceId">Which device do you read?</param>
            <param name="keys">Specify key name list , use , or space or ; to split </param>
            <param name="begin">For example: 2019-06-06 12:24</param>
            <param name="end">For example: 2019-06-06 12:24</param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetTelemetryData(System.Guid,IoTSharp.Dtos.TelemetryDataQueryDto)">
             <summary>
             Returns the telemetry data of the specified device, obtained according to keyname and the specified time range. If keyname is all, then returns the data of all keys.
             </summary>
             <param name="deviceId">Specify device ID</param>
             <param name="queryDto">Query condition example:
            {
             "keys": "",
             "begin": "2022-03-23T11:44:56.488Z",
             "every": "1.03:14:56:166",
             "aggregate": "Mean"
             }
             </param>
             <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetDevice(System.Guid)">
            <summary>
            Get device details
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.PutDevice(System.Guid,IoTSharp.Dtos.DevicePutDto)">
             <summary>
            Modify device
             </summary>
             <param name="id"></param>
             <param name="device"></param>
             <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.PostDevice(IoTSharp.Dtos.DevicePostDto)">
            <summary>
            Create a device. The customer ID and tenant ID belong to the currently logged in user.
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.DeleteDevice(System.Guid)">
            <summary>
            Delete device
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.Rpc(System.String,System.String,System.Int32,System.Object)">
            <summary>
            Remote control the specified device. This method controls by sending mqtt messages to the remote device. The device replies with the result after receiving the message. This method is considered the end of the call.
            </summary>
            <param name="access_token"></param>
            <param name="method"></param>
            <param name="timeout"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.Telemetry(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Upload telemetry data via HTTP
            </summary>
            <param name="access_token">Device's access token</param>
            <param name="telemetrys"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.Attributes(System.String,IoTSharp.Contracts.DataSide,System.String)">
             <summary>
             Get the device properties on the service side
             </summary>
             <param name="access_token">Device's access token </param>
            <param name="dataSide">Specifying data side.</param>
            <param name="keys">Specifying Attribute's keys</param>
             <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.Attributes(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Upload client-side attribute data
            </summary>
            <param name="access_token">Device's access token </param>
            <param name="attributes">attributes</param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.Alarm(System.String,IoTSharp.Contracts.DeviceAlarmDto)">
            <summary>
            Upload alarm information for gateway sub-devices or ordinary devices
            </summary>
            <param name="access_token">token</param>
            <param name="alarm">Warning content</param>
            <returns></returns>
            <remarks>If it is a gateway device, when OriginatorName is the name or ID of the gateway, 
            we think it is a warning from the gateway itself, otherwise we think it is a warning 
            from the device</remarks>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.PushDataToMap(System.String,System.String)">
            <summary>
            Call RawDataGateway in Http mode to upload the original Json or xml and parse it through the rule chain.
            </summary>
            <param name="access_token">Device's access token </param>
            <param name="format"></param>
            <returns></returns>
            <remarks>Need to fill data in the body</remarks>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.PushDataToRuleChains(System.String,System.String)">
            <summary>
            Upload the original Json or XML for parsing through the rule chain.
            </summary>
            <param name="access_token">Device's access token </param>
            <param name="format">Only supports json and xml, XML will be converted to Json. </param>
            <returns></returns>
            <remarks>Need to fill data in the body</remarks>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.AddAttribute(System.String,IoTSharp.Controllers.DeviceAttributeDto)">
            <summary>
            Add new attributes on the service side
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.EditAttribute(System.Guid,IoTSharp.Dtos.DeviceAttrEditDto)">
            <summary>
            Service side and any side attribute modification
            </summary>
            <param name="devid"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.RemoveAttribute(IoTSharp.Dtos.RemoveDeviceAttributeInput)">
            <summary>
            Attribute deletion
            </summary>
            <param name="input">Attribute to be deleted. </param>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetSessionStatus">
            <summary>
            SessionStatus
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DevicesController.GetClientStatus">
            <summary>
            SessionStatus
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DictionaryController.Delete(System.Int32)">
             <summary>
            
             </summary>
             <param name="id"></param>
             <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DictionaryGroupController.Save(IoTSharp.Data.BaseDictionaryGroup)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DictionaryGroupController.Delete(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.DynamicFormInfoController.Save(IoTSharp.Data.DynamicFormInfo)">
             <summary>
            
             </summary>
             <param name="m"></param>
             <returns></returns>
        </member>
        <member name="T:IoTSharp.Controllers.HealthChecksController">
            <summary>
            health examination
            </summary>
        </member>
        <member name="M:IoTSharp.Controllers.HealthChecksController.Get">
            <summary>
             Get health check information of related services
             </summary>
             <returns></returns>
        </member>
        <member name="T:IoTSharp.Controllers.InstallerController">
            <summary>
            Install
            </summary>
        </member>
        <member name="M:IoTSharp.Controllers.InstallerController.Instance">
            <summary>
            Check IoTSharp instance information
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.InstallerController.CreateRootCertificate">
            <summary>
            The domain name does not need to be configured. The machine name will be used by default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.InstallerController.Install(IoTSharp.Dtos.InstallDto)">
            <summary>
            Install and initialize IoTSharp
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:IoTSharp.Controllers.MenuController">
            <summary>
            this is test purpose
            </summary>
        </member>
        <member name="T:IoTSharp.Controllers.MetricsController">
            <summary>
            Running indicator information
            </summary>
        </member>
        <member name="M:IoTSharp.Controllers.MetricsController.EventBus">
            <summary>
            Returns the statistics of the event bus
            </summary>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.ProducesController.List(IoTSharp.Controllers.Models.QueryDto)">
            <summary>
            Product List
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.ProducesController.ProduceDatas(System.Guid)">
            <summary>
            
            </summary>
            <param name="produceid"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.ProducesController.Get(System.Guid)">
            <summary>
            Get product
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.ProducesController.Delete(System.Guid)">
            <summary>
            Delete product
            </summary>
            <param name="produceid">Product ID</param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.ProducesController.Save(IoTSharp.Dtos.ProduceAddDto)">
            <summary>
            Add new product
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.ProducesController.Update(IoTSharp.Dtos.ProduceAddDto)">
             <summary>
            Modify product
             </summary>
             <param name="dto"></param>
             <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.ProducesController.GetProduceData(System.Guid)">
            <summary>
            Get product attributes
            </summary>
            <param name="produceId">Product ID</param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.ProducesController.EditProduceData(IoTSharp.Dtos.ProduceDataEditDto)">
            <summary>
            Modify attributes
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.ProducesController.GetProduceDictionary(System.Guid)">
            <summary>
            Get product dictionary
            </summary>
            <param name="produceId">Product ID</param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.ProducesController.EditProduceDictionary(IoTSharp.Dtos.ProduceDictionaryEditDto)">
            <summary>
            Modify dictionary
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.RulesController.UpdateFlowExpression(IoTSharp.Dtos.UpdateFlowExpression)">
            <summary>
            Update the conditional expression of the node
            </summary>
            <returns> </returns>
        </member>
        <member name="M:IoTSharp.Controllers.RulesController.Fork(IoTSharp.Data.FlowRule)">
            <summary>
            Make a copy of the rule
            </summary>
            <param name="flowRule"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.RulesController.FlowEvents(IoTSharp.Controllers.Models.EventParam)">
             <summary>
            
             </summary>
             <param name="m"></param>
             <returns></returns>
        </member>
        <member name="T:IoTSharp.Controllers.TenantsController">
            <summary>
            Tenant management
            </summary>
        </member>
        <member name="M:IoTSharp.Controllers.TenantsController.GetTenant(IoTSharp.Controllers.Models.QueryDto)">
            <summary>
            Product List
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.TenantsController.GetTenant(System.Guid)">
            <summary>
            Ordinary users use their own tenant information to live
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.TenantsController.PutTenant(System.Guid,IoTSharp.Data.Tenant)">
            <summary>
            Modify the specified tenant information, only for tenant administrators
            </summary>
            <param name="id"></param>
            <param name="tenant"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.TenantsController.PostTenant(IoTSharp.Data.Tenant)">
            <summary>
            Add new tenant, system administrator only
            </summary>
            <param name="tenant"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Controllers.TenantsController.DeleteTenant(System.Guid)">
            <summary>
            Delete tenant, system users only
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:IoTSharp.Controllers.DeviceAttributeDto.DataSide">
            <summary>
            Data side
            </summary>
        </member>
        <member name="P:IoTSharp.Controllers.DeviceAttributeDto.DataType">
            <summary>
            type of data
            </summary>
        </member>
        <member name="P:IoTSharp.Controllers.Models.QueryDto.Offset">
             <summary>
            Start line of current page
             </summary>
        </member>
        <member name="P:IoTSharp.Controllers.Models.QueryDto.Limit">
             <summary>
            Number of page lines
             </summary>
        </member>
        <member name="P:IoTSharp.Controllers.Models.QueryDto.Name">
            <summary>
            Name used for fuzzy query
            </summary>
        </member>
        <member name="T:IoTSharp.Controllers.Models.CustomerParam">
            <summary>
            Tenant's customer query
            </summary>
        </member>
        <member name="P:IoTSharp.Controllers.Models.CustomerParam.tenantId">
            <summary>
            Tenant ID
            </summary>
        </member>
        <member name="T:IoTSharp.Controllers.Models.UserQueryDto">
             <summary>
            Customer's user query
             </summary>
        </member>
        <member name="P:IoTSharp.Controllers.Models.UserQueryDto.CustomerId">
            <summary>
            Customer ID
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.TokenEntity.access_token">
            <summary>
            token
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.TokenEntity.expires_in">
            <summary>
            Expiration
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.LoginResult.Code">
            <summary>
            Login results
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.LoginResult.UserName">
            <summary>
            username
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.LoginResult.SignIn">
            <summary>
            Login results
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.LoginResult.Succeeded">
            <summary>
            whether succeed
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.LoginResult.Token">
             <summary>
            Token
             </summary>
        </member>
        <member name="P:IoTSharp.Dtos.LoginResult.Roles">
            <summary>
            Permissions possessed by the user
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.LoginDto.Password">
            <summary>
            password
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.LoginDto.UserName">
            <summary>
            username
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.RegisterDto.Email">
            <summary>
            The email address is also the user name. One email address can only register one customer of the platform. If you have two tenants with accounts on the platform, you need two email addresses.
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.RegisterDto.PhoneNumber">
            <summary>
            telephone number
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.RegisterDto.Customer">
            <summary>
            The user's customer email address
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.RegisterDto.Password">
            <summary>
            Username Password
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.UserItemDto.Email">
            <summary>
            User email address
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.UserItemDto.Roles">
            <summary>
            Permission identification
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.UserItemDto.PhoneNumber">
            <summary>
            telephone number
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.UserItemDto.AccessFailedCount">
            <summary>
            Number of failed login attempts
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.UserItemDto.Id">
            <summary>
            Identification
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.UserItemDto.LockoutEnabled">
            <summary>
            Whether it is locked
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.UserItemDto.LockoutEnd">
            <summary>
            Lock duration
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.UserItemDto.UserName">
            <summary>
            username
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.UserPassword.Pass">
            <summary>
            Old Password
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.UserPassword.PassNew">
            <summary>
            New Password
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.UserPassword.PassNewSecond">
            <summary>
            Verify password for the second time
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.CreateUserDto.Email">
            <summary>
            User email
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.CreateUserDto.Password">
            <summary>
            System administrator password
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.CreateUserDto.PhoneNumber">
            <summary>
            telephone number
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.CreateUserDto.Customer">
             <summary>
            Customer ID
             </summary>
        </member>
        <member name="P:IoTSharp.Dtos.CreateUserInput.Email">
            <summary>
            The email address is also the user name. One email address can only register one customer of the platform. If you have two tenants with accounts on the platform, you need two email addresses.
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.CreateUserInput.PhoneNumber">
            <summary>
            telephone number
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.CreateUserInput.CustomerId">
             <summary>
            
             </summary>
        </member>
        <member name="P:IoTSharp.Dtos.CreateUserInput.Password">
            <summary>
            Username Password
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.DeviceDetailDto.Name">
             <summary>
            Device name
             </summary>
        </member>
        <member name="P:IoTSharp.Dtos.DeviceDetailDto.DeviceType">
            <summary>
            Equipment type
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.DeviceDetailDto.Timeout">
            <summary>
            Timeout seconds
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.DeviceDetailDto.Owner">
            <summary>
            Owner
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.DeviceDetailDto.Active">
            <summary>
            Is it active?
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.DeviceDetailDto.LastActivityDateTime">
            <summary>
            Last activity
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.DeviceRuleDto.Name">
             <summary>
            Device name
             </summary>
        </member>
        <member name="P:IoTSharp.Dtos.DeviceRuleDto.DeviceType">
            <summary>
            Equipment type
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.DeviceRuleDto.Timeout">
            <summary>
            Timeout seconds
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.FlowOperationDto.NodeStatus">
             <summary>
            Node processing status, 0 created
             </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstallDto.Email">
            <summary>
            System administrator username
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstallDto.CustomerName">
            <summary>
            client's name
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstallDto.Password">
            <summary>
            System administrator password
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstallDto.TenantName">
            <summary>
            Tenant name
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstallDto.TenantEMail">
            <summary>
            Tenant email
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstallDto.CustomerEMail">
            <summary>
            Customer email
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstallDto.PhoneNumber">
            <summary>
            telephone number
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstanceDto.Version">
            <summary>
            system version
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstanceDto.Installed">
            <summary>
            Whether it is installed
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.InstanceDto.Domain">
            <summary>
            http://localhost/
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.LockDto.Id">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.LockDto.Opt">
            <summary>
            User lock operation
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceAddDto.Name">
             <summary>
            Device name
             </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceAddDto.Icon">
            <summary>
            ICON file full path
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceAddDto.GatewayType">
            <summary>
            Gateway type handles related configurations based on unavailable gateways
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceAddDto.GatewayConfiguration">
            <summary>
            Gateway configuration information, if it is Unknown, it will not be used. If it is customized, this is a json string.
            If it is another corresponding gateway, then here is the corresponding configuration file name.
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceAddDto.DefaultTimeout">
            <summary>
            Timeout seconds
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceAddDto.Tenant">
            <summary>
            Tenant
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceAddDto.Customer">
            <summary>
            client
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceAddDto.DefaultIdentityType">
             <summary>
            Default authentication type
             </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceAddDto.Description">
            <summary>
            describe
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceAddDto.DefaultDeviceType">
             <summary>
            Default device type
             </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceDictionaryItemDto.KeyName">
            <summary>
            Field Name
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceDictionaryItemDto.DisplayName">
            <summary>
            Field display name
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceDictionaryItemDto.Unit">
            <summary>
            Unit
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceDictionaryItemDto.UnitExpression">
             <summary>
            Unit conversion expression
             </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceDictionaryItemDto.UnitConvert">
            <summary>
            Unit conversion
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceDictionaryItemDto.KeyDesc">
            <summary>
            Field remarks
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceDictionaryItemDto.DefaultValue">
            <summary>
            default value
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceDictionaryItemDto.Display">
            <summary>
            Whether to display
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceDictionaryItemDto.Place0">
            <summary>
            Location name
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceDictionaryItemDto.PlaceOrder0">
            <summary>
            This position sequence
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceDictionaryItemDto.DataType">
            <summary>
            type of data 
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.ProduceDto.DefaultDeviceType">
             <summary>
            Default device type
             </summary>
        </member>
        <member name="T:IoTSharp.Dtos.TelemetryDataQueryDto">
            <summary>
            Query historical telemetry data request structure
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.TelemetryDataQueryDto.keys">
            <summary>
            The key value to be obtained, if it is empty, it is all
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.TelemetryDataQueryDto.begin">
            <summary>
            Starting time
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.TelemetryDataQueryDto.end">
            <summary>
            Deadline, default is now.
            </summary>
        </member>
        <member name="P:IoTSharp.Dtos.TelemetryDataQueryDto.every">
            <summary>
            Data section aggregation interval
            </summary>
            <example>1.03:14:56:166</example>
            <remarks>d.hh:mm:ss:FFF</remarks>
        </member>
        <member name="P:IoTSharp.Dtos.TelemetryDataQueryDto.aggregate">
            <summary>
            Data section calculation method,
            </summary>
        </member>
        <member name="F:IoTSharp.Dtos.TimespanConverterNewtonsoft.TimeSpanFormatString">
            <summary>
            Format: Days.Hours:Minutes:Seconds:Milliseconds
            </summary>
        </member>
        <member name="M:IoTSharp.Extensions.QueryExtensions.Query``1(IoTSharp.Controllers.Models.QueryDto,System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Paging query
            </summary>
            <typeparam name="T">Original table type</typeparam>
            <param name="_dto">Basic query conditions</param>
            <param name="src">Query source</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Extensions.QueryExtensions.Query``1(IoTSharp.Controllers.Models.QueryDto,System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Paging query
            </summary>
            <typeparam name="T">Original table type</typeparam>
            <param name="_dto">Basic query conditions</param>
            <param name="src">Query source</param>
            <param name="_where">Additional query conditions</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Extensions.QueryExtensions.Query``2(IoTSharp.Controllers.Models.QueryDto,System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Paging query
            </summary>
            <typeparam name="T">Original table type</typeparam>
            <typeparam name="P">Query name field type</typeparam>
            <param name="_dto">Basic query conditions</param>
            <param name="src">Query source</param>
            <param name="func">Specify the field corresponding to the Name query in the query condition</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Extensions.QueryExtensions.Query``2(IoTSharp.Controllers.Models.QueryDto,System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Paging query
            </summary>
            <typeparam name="T">Original table type</typeparam>
            <typeparam name="P">Query name field type</typeparam>
            <param name="_dto">Basic query conditions</param>
            <param name="src">Query source</param>
            <param name="func">Specify the field corresponding to the Name query in the query condition</param>
            <param name="_where">Additional query conditions</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.Extensions.QueryExtensions.Query``3(IoTSharp.Controllers.Models.QueryDto,System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Paging query
            </summary>
            <typeparam name="T">Original table type</typeparam>
            <typeparam name="P">Query name field type</typeparam>
            <typeparam name="R">Convert the queried data to the specified type</typeparam>
            <param name="_dto">Basic query conditions</param>
            <param name="src">Query source</param>
            <param name="func">Specify the field corresponding to the Name query in the query condition</param>
            <param name="_where">Additional query conditions</param>
            <param name="conver">Convert the queried data to the specified expression</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:IoTSharp.Extensions.RpcClient">
            <summary>
            https://github.com/chkr1011/MQTTnet/blob/master/Source/MQTTnet.Extensions.Rpc/MqttRpcClient.cs
            </summary>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.JustFill``1(IoTSharp.Data.ApplicationDbContext,Microsoft.AspNetCore.Mvc.ControllerBase,``0)">
            <summary>
            Fill in the contents of the table based on user information
            </summary>
            <typeparam name="T"></typeparam>
            <param name="_context"></param>
            <param name="controller"></param>
            <param name="ak"></param>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.JustCustomer``1(Microsoft.EntityFrameworkCore.DbSet{``0},Microsoft.AspNetCore.Mvc.ControllerBase)">
            <summary>
            Query the current customer's data
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ts"></param>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.JustCustomer``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.Guid)">
            <summary>
            Query the data of the specified customer
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ts"></param>
            <param name="_customerId"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.JustTenant``1(Microsoft.EntityFrameworkCore.DbSet{``0},Microsoft.AspNetCore.Mvc.ControllerBase)">
            <summary>
            Query the data of the current user's tenant
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ts"></param>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.JustTenant``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.Guid)">
            <summary>
            Query the data of the specified tenant
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ts"></param>
            <param name="_tenantId"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.GetCustomer(IoTSharp.Data.ApplicationDbContext,System.Guid)">
            <summary>
            Get specified customer information
            </summary>
            <param name="context"></param>
            <param name="custId"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.GetTenant(IoTSharp.Data.ApplicationDbContext,System.Guid)">
            <summary>
            Get the specified tenant information
            </summary>
            <param name="context"></param>
            <param name="tenId"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.GetEmail(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Get the current user's email address
            </summary>
            <param name="_user"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.GetUserId(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Get the current user's ID
            </summary>
            <param name="_user"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.GetTenantId(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Get the current user's ID
            </summary>
            <param name="_user"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.GetCustomerId(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Get the current user's customer ID
            </summary>
            <param name="_user"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.AddJWTSecurity(NSwag.Generation.AspNetCore.AspNetCoreOpenApiDocumentGeneratorSettings)">
            <summary>
            
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:IoTSharp.IoTSharpExtension.JudgeOrCreateNewDevice(IoTSharp.Data.Device,System.String,Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Create a sub-device of the gateway.
            </summary>
            <param name="device">Parent device</param>
            <param name="devname">Subdevice name</param>
            <param name="_scopeFactor"></param>
            <param name="_logger"></param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.FlowRuleEngine.FlowRuleProcessor.RunFlowRules(System.Guid,System.Object,System.Guid,IoTSharp.Contracts.FlowRuleRunType,System.String)">
             <summary>
            Run the rules of the specified rule chain
             </summary>
             <param name="ruleid"> Rule Id</param>
             <param name="data">data</param>
             <param name="deviceId">Creator (can be a simulator (test) or a device, distinguish it in EventType)</param>
             <param name="type">Type</param>
             <param name="bizId">Business Id (third-party unique Id, used to retrieve event and record identification)</param>
             <returns> Returns the record information of all nodes, save it if needed</returns>
        </member>
        <member name="M:IoTSharp.FlowRuleEngine.FlowRuleProcessor.ProcessCondition(System.Collections.Generic.List{IoTSharp.Data.Flow},System.Guid,System.Object)">
            <summary>
            Call the rule engine to determine whether the rules in the connection after the current node pass the verification. If the verification is true, return the target node corresponding to the line that meets the conditions.
            </summary>
            <param name="_allFlows">All nodes</param>
            <param name="flowId">Current node</param>
            <param name="data">Enter the data parameters of the current node</param>
            <returns></returns>
        </member>
        <member name="M:IoTSharp.FlowRuleEngine.SimpleFlowExcutor.Excute(IoTSharp.FlowRuleEngine.FlowExcuteEntity)">
            <summary>
            Call the rule engine to process the online logic and determine whether it is True, which is used to determine whether to continue to the next node.
            </summary>
            <param name="Input"></param>
            <returns></returns>
        </member>
        <member name="P:IoTSharp.Gateways.OPCUATag.TagName">
            <summary>
            Simulator example. Function._System._DemandPoll
            </summary>
        </member>
        <member name="P:IoTSharp.Gateways.OPCUATag.TagValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:IoTSharp.Gateways.OPCUATag.TagQuality">
            <summary>
            
            </summary>
        </member>
        <member name="P:IoTSharp.Gateways.OPCUATag.TagTimestamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:IoTSharp.Models.ModelAddAssetDevice.AssetId">
            <summary>
            AssetId
            </summary>
        </member>
        <member name="P:IoTSharp.Models.ModelAddAssetDevice.Deviceid">
            <summary>
            Device ID to import
            </summary>
        </member>
        <member name="P:IoTSharp.Models.ModelAddAssetDevice.Attrs">
            <summary>
            List of device attribute data to be imported
            </summary>
        </member>
        <member name="P:IoTSharp.Models.ModelAddAssetDevice.Temps">
            <summary>
            List of device telemetry data to import
            </summary>
        </member>
        <member name="P:IoTSharp.Models.ModelAddAssetDevice.ModelAddAssetDeviceItem.Description">
            <summary>
            Description of the property or telemetry
            </summary>
        </member>
        <member name="P:IoTSharp.Models.ModelAddAssetDevice.ModelAddAssetDeviceItem.keyName">
            <summary>
            KeyName of the property or telemetry
            </summary>
        </member>
        <member name="P:IoTSharp.Models.ModelAddAssetDevice.ModelAddAssetDeviceItem.dataSide">
            <summary>
            data side
            </summary>
        </member>
        <member name="P:IoTSharp.Models.ModelAddAssetDevice.ModelAddAssetDeviceItem.Name">
            <summary>
            Alias for the property or telemetry KeyName
            </summary>
        </member>
        <member name="P:IoTSharp.Models.ModelEditAssetAttrItem.Id">
            <summary>
             The id of the association
            </summary>
        </member>
        <member name="P:IoTSharp.Models.ModelEditAssetAttrItem.Description">
            <summary>
             Description of the property or telemetry
            </summary>
        </member>
        <member name="P:IoTSharp.Models.ModelEditAssetAttrItem.Name">
            <summary>
             Alias for the property or telemetry KeyName
            </summary>
        </member>
        <member name="P:IoTSharp.Models.ModelAssetAttrItem.Id">
            <summary>
            The id of the association
            </summary>
        </member>
        <member name="P:IoTSharp.Models.ModelAssetAttrItem.Description">
            <summary>
            Description of properties or telemetry
            </summary>
        </member>
        <member name="P:IoTSharp.Models.ModelAssetAttrItem.keyName">
            <summary>
            KeyName of property or telemetry
            </summary>
        </member>
        <member name="P:IoTSharp.Models.ModelAssetAttrItem.dataSide">
            <summary>
            Attribute or telemetry data side
            </summary>
        </member>
        <member name="P:IoTSharp.Models.ModelAssetAttrItem.Name">
            <summary>
            Aliases for properties or telemetry
            </summary>
        </member>
        <member name="P:IoTSharp.Models.AssetDeviceItem.Name">
             <summary>
            Device name
             </summary>
        </member>
        <member name="P:IoTSharp.Models.AssetDeviceItem.Id">
             <summary>
            DeviceId
             </summary>
        </member>
        <member name="P:IoTSharp.Models.AssetDeviceItem.DeviceType">
            <summary>
            Equipment type
            </summary>
        </member>
        <member name="P:IoTSharp.Models.AssetDeviceItem.Timeout">
            <summary>
            time out
            </summary>
        </member>
        <member name="P:IoTSharp.Models.AssetDeviceItem.DeviceIdentity">
            <summary>
            Device authentication method
            </summary>
        </member>
        <member name="P:IoTSharp.Models.AssetDeviceItem.Attrs">
             <summary>
            Attribute data
             </summary>
        </member>
        <member name="P:IoTSharp.Models.AssetDeviceItem.Temps">
            <summary>
            Telemetry data
            </summary>
        </member>
        <member name="T:IoTSharp.Models.PagedData`1">
            <summary>
            Returns a page of data of type <typeparamref name="T"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:IoTSharp.Models.PagedData`1.total">
             <summary>
            Total amount of data
             </summary>
        </member>
        <member name="P:IoTSharp.Models.PagedData`1.rows">
            <summary>
            One page of data
            </summary>
        </member>
        <member name="P:IoTSharp.Models.Rule.NodeObject.nodetype">
            <summary>
            Node grouping type (script, executor)
            </summary>
        </member>
        <member name="P:IoTSharp.Models.Rule.NodeObject.content">
            <summary>
            Node content (script content for scripts, configuration for executors)
            </summary>
        </member>
        <member name="P:IoTSharp.Models.Rule.NodeObject.mata">
             <summary>
            
             </summary>
        </member>
        <member name="T:IoTSharp.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性，对
              使用此强类型资源类的所有资源查找执行重写。
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.Logo">
            <summary>
              查找 System.Byte[] 类型的本地化资源。
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.ShowHelp">
            <summary>
              查找类似 显示帮助 的本地化字符串。
            </summary>
        </member>
        <member name="P:IoTSharp.Properties.Resources.TheCertificateIsInstalled">
            <summary>
              查找类似 The certificate is installed 的本地化字符串。
            </summary>
        </member>
        <member name="T:IoTSharp.Services.MQTTControllers.V1GatewayController">
            <summary>
            Compatible with thingsboard protocol
            </summary>
        </member>
    </members>
</doc>
